= acts_as_multipart_form

Create multipart forms in rails without using multiple routes.  A controller mixin handles loading and saving data based on partials on a single route.

= How to use

== Install the gem by adding this to your gemfile

    gem "acts_as_multipart_form"

== Install the migration and config with

    rails generate acts_as_multipart_form:install
    rake db:migrate

== Add the mixin to your controller

    acts_as_multipart_form :name => :hire_form, :parts => [:person_info, :job_info], :model => "Person", :form_route => "person_hire_form"

The parts correspond to methods in the controller and partials in the controller's views folder.  Additional methods called :person_info_update and :job_info_update are also necessary to handle saving the data.  

Each form has a polymorphic relationship with a single record.  This relationship is specified by the model key's value.  This is how the form is loaded on the index page and the only association it has with the rest of the system.

Two routes can be specified for the form system. The form route corresponds to the route to the form itself.  It's default value is model_name_form_name.  In the example, the specified value would be the default value.  The show route, specified with the tag :show_route is redirected to after the last part of the multipart form is submitted and passes validations.  It defaults to model_name to correspond with the model's view page.

Note that when you add the route to your route file, it must be able to match both get and post requests.

== Add the mixin to your model

    multipart_formable :forms => [:hire_form]

This is currently only used for validations.  If this is set, you can use a validation like this to only validate a field if the save is coming from a specific multipart form part.

    validates_presence_of :name, :if => :hire_form_personal_info?

== Add the mixin to your controller
    
    PeopleController < ApplicationController
      acts_as_multipart_form :hire_form, :parts => [:personal, :job]

You will also need to add these methods: hire_form, personal, personal_update, job, and job_update. Hire_form is called each time the page is accessed and calls the correct form part.  Person and job correspond to the actual form views.  Person_update and job_update set and validate the user input.  See the MultipartFormInController documentation for additional information.

== Add the route

    resource :people do
      match 'edit', to: 'people#hire_form', :via => [:get, :post]
      # optionally add a new route as well

== Setting up your form

These examples use formtastic but it is not required.

app/views/people/hire_form.html.erb:

    <%= render "multipart_form/breadcrumb" %>

    <%= semantic_form_for @form_subject, :url => person_hire_form_path(:id => @form_subject.id, :multipart_form_part => @next_multipart_form_part), :html => { :method => :post } do |f| %>
      <%= render :partial => "multipart_form/all_errors" %>
      <%= render :partial => @multipart_form_part, :locals => {:form => f}  %>
      <%= f.submit "Submit" %>
    <% end %>

app/views/people/_personal.html.erb:

    <%= form.inputs do %>
      <%= form.input :name %>
      <%= form.input :address %>
    <% end %>

app/views/people/_job.html.erb:

    <%= form.inputs do %>
      <%= form.input :hire_date %>
      <%= form.input :salary %>
    <% end %>

Note that the error partial is only needed if you are storing multiple objects that are not nested in your form submits.  Otherwise a semantic_errors or standard error code for the @form_subject will be sufficient.

The breadcrumb adds links to the other multipart for parts.  The all_errors partial is a substitute for putting error handling on each individual partial.  The url and @form_subject instance variable are necessary to make the form submit and redirect correctly.

== Adding form part links to the index page

=== On the controller
    
    @people = Person.all
    load_multipart_form_index_links(:hire_form, @people)

=== On the index view

    <%= render "multipart_form/index_links",  :locals => {:form_subject => person } %>

Creates links to each form part for the given form subject.  The load_multipart_form_index_links must be called to load the data for the links.  The configuration options in the initializer can be used to change the output of the partial.


== Future work

* Fix the index links loading so that the user does not have to explicitly call a method when they are needed
* Improve code quality of the mixin where it makes variables available to views
* Find a fix for having to explicitly create the form subject in the code.  The current system pushes us towards models that only hold the form subject id.  The problem is that it is possible to use a multipart form without a specific form model.  This leads to orphaned or blank records.
* Increase test coverage for the multipart_form_handler

== Contributing to acts_as_multipart_form
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Jeremiah Hemphill. See LICENSE.txt for
further details.

